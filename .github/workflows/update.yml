name: Update
on:
  # Runs everyday at noon
  schedule:
    - cron: "0 12 * * *"
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      lock:
        type: boolean
        default: true
        description: Update flake.lock
      generate:
        type: boolean
        default: true
        description: Update generated files

# Allow one concurrent update per branch
concurrency:
  group: "update-${{ github.ref_name }}"
  cancel-in-progress: true

# Allow pushing and creating PRs
permissions:
  contents: write
  pull-requests: write

jobs:
  update:
    name: Update the flake inputs and generate options
    runs-on: ubuntu-latest
    timeout-minutes: 40
    if: github.event_name != 'schedule' || github.repository == 'nix-community/nixvim'
    env:
      repo: ${{ github.repository }}
      branch: update/${{ github.ref_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.CI_UPDATE_SSH_KEY }}

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Get info on the current PR
        id: open_pr_info
        run: |
          # Query for info about the already open update PR
          # Sets `number` and `url` step outputs if a PR is open
          gh api graphql -F owner='{owner}' -F repo='{repo}' -F branch="$branch" -f query='
            query($owner:String!, $repo:String!, $branch:String!){
              repository(owner: $owner, name: $repo) {
                pullRequests(first: 1, states: OPEN, headRefName: $branch) {
                  nodes {
                    number
                    url
                  }
                }
              }
            }
          ' | jq --raw-output '
            .data.repository.pullRequests.nodes[]
            | to_entries | map("\(.key)=\(.value)")
            | .[]
          ' >> $GITHUB_OUTPUT

      - name: Update flake.lock
        id: flake_lock
        if: inputs.lock || github.event_name == 'schedule'
        run: |
          old=$(git show --no-patch --format=%h)
          nix flake update --commit-lock-file
          new=$(git show --no-patch --format=%h)
          if [ "$old" != "$new" ]; then
            echo "body<<EOF" >> "$GITHUB_OUTPUT"
            git show --no-patch --format=%b >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if nixpkgs input was changed
        # The check is run only on scheduled runs & when there is a PR already open
        if: github.event_name == 'schedule' && steps.open_pr_info.outputs.number
        env:
          pr_num: ${{ steps.open_pr_info.outputs.number }}
          pr_url: ${{ steps.open_pr_info.outputs.url }}
          changes: ${{ steps.flake_lock.outputs.body || 'No changes' }}
        run: |
          getAttr() {
            nix eval --raw --impure \
              --expr '{ ref }: builtins.getFlake ref' \
              --argstr ref "$1" "$2"
          }
          getNixpkgsRev() {
            getAttr "$1" 'inputs.nixpkgs.rev'
          }
          old=$(getNixpkgsRev "github:$repo/$branch")
          new=$(getNixpkgsRev "$PWD")
          if [[ "$old" = "$new" ]]; then
            (
              echo "nixpkgs rev has not changed ($new). Stopping..."
              echo 'You can re-run the workflow manually to update anyway.'
            ) >&2
            (
              echo '## Update cancelled'
              echo
              echo 'The `nixpkgs` rev has not changed (`'"$new"'`)'
              echo "compared to the already open PR [#$pr_num]($pr_url)."
              echo
              echo 'The following changes would have been made:'
              echo '```'
              echo "$changes"
              echo '```'
              echo
              echo 'You can re-run the workflow manually to update anyway.'
              echo
            ) >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Update generated files
        id: generate
        if: inputs.generate || github.event_name == 'schedule'
        run: |
          old=$(git show --no-patch --format=%h)
          nix-build ./update-scripts -A generate
          ./result/bin/generate --commit
          new=$(git show --no-patch --format=%h)
          if [ "$old" != "$new" ]; then
            body=$(git show --no-patch --format=%b)
            echo "body<<EOF" >> "$GITHUB_OUTPUT"
            if [ -n "$body" ]; then
              # Multi-file changes are listed in the body
              echo "$body" >> "$GITHUB_OUTPUT"
            else
              # Single-file changes are only in the summary,
              # e.g. "generated: Updated none-ls.nix"
              git show --no-patch --format=%s | \
              sed -e 's/^generated:/-/' >> "$GITHUB_OUTPUT"
            fi
            echo "EOF" >> "$GITHUB_OUTPUT"
          fi

      - name: Create Pull Request
        id: pr
        uses: peter-evans/create-pull-request@v6
        with:
          add-paths: "!**"
          branch: update/${{ github.ref_name }}
          delete-branch: true
          title: |
            [${{ github.ref_name }}] Update flake.lock & generated files
          body: |
            ## Flake lockfile
            ```
            ${{ steps.flake_lock.outputs.body || 'No changes' }}
            ```

            ## Generate
            ${{ steps.generate.outputs.body || 'No changes' }}

      - name: Print summary
        if: ${{ steps.pr.outputs.pull-request-number }}
        run: |
          num="${{ steps.pr.outputs.pull-request-number }}"
          pr_url="${{ steps.pr.outputs.pull-request-url }}"
          pr_branch="${{ steps.pr.outputs.pull-request-branch }}"
          head="${{ steps.pr.outputs.pull-request-head-sha }}"
          operation="${{ steps.pr.outputs.pull-request-operation }}"

          # stdout
          echo "${head:0:6} pushed to ${pr_branch}"
          echo "${pr} was ${operation}."

          # markdown summary
          echo "## ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo "\`${head:0:6}\` pushed to \`${pr_branch}\`" >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo "[#${num}](${pr_url}) was ${operation}." >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
