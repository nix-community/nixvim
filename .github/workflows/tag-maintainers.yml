name: Sync Plugin Maintainer Reviewers

on:
  pull_request_target:
    types: [opened, ready_for_review, reopened, synchronize]

# Concurrency settings to ensure that only one instance of this workflow runs per PR.
# If a new commit is pushed, it cancels the previous run.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read # To checkout code
  pull-requests: write # To add/remove reviewers and comment

jobs:
  tag-maintainers:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      github.event.pull_request.state == 'open'
    steps:
      # Generate a GitHub App token if configured, so we can use custom `bot`.
      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        if: vars.CI_APP_ID
        id: app-token
        with:
          app-id: ${{ vars.CI_APP_ID }}
          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}
          permission-contents: write
          permission-pull-requests: write
          permission-members: read

      # Checkout the code from the base branch.
      # This is a security measure for `pull_request_target` to run trusted code.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      # Install Nix
      - name: Install Nix
        uses: cachix/install-nix-action@v31

      # Identify which plugin files have changed in the PR.
      - name: Get changed plugin files
        id: changed-files
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          PR_NUM: ${{ github.event.pull_request.number }}
        run: |
          CHANGED_FILES=$(gh pr diff "$PR_NUM" --name-only || true)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          {
            echo "changed_files<<EOF"
            echo "$CHANGED_FILES"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      # Evaluate Nix code to find maintainers for the changed files.
      - name: Extract maintainers from changed files
        id: extract-maintainers
        env:
          PR_AUTHOR: "${{ github.event.pull_request.user.login }}"
          CHANGED_FILES: "${{ steps.changed-files.outputs.changed_files }}"
        run: |
          MAINTAINERS_LIST=$(./ci/tag-maintainers/extract-maintainers.py \
            --changed-files "$CHANGED_FILES" \
            --pr-author "$PR_AUTHOR")

          echo "maintainers=$MAINTAINERS_LIST" >> "$GITHUB_OUTPUT"

      # Get lists of existing reviewers to avoid duplicates.
      - name: Get current reviewers
        id: current-reviewers
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          PR_NUM: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          PENDING_REVIEWERS=$(gh pr view "$PR_NUM" --json reviewRequests --jq '.reviewRequests[].login')
          PAST_REVIEWERS=$(gh api "repos/$REPO/pulls/$PR_NUM/reviews" --jq '.[].user.login')
          USERS_TO_EXCLUDE=$(printf "%s\n%s" "$PENDING_REVIEWERS" "$PAST_REVIEWERS" | sort -u)

          {
            echo "pending_reviewers<<EOF"
            echo "$PENDING_REVIEWERS"
            echo EOF
            echo "users_to_exclude<<EOF"
            echo "$USERS_TO_EXCLUDE"
            echo EOF
          } >> $GITHUB_OUTPUT

          echo "Current pending reviewers: $PENDING_REVIEWERS"
          echo "Complete list of users to exclude: $USERS_TO_EXCLUDE"

      # Filter the maintainer list to only include repository collaborators.
      # You can only request reviews from users with at least triage permissions.
      - name: Check maintainer collaborator status
        id: check-collaborators
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          MAINTAINERS: ${{ steps.extract-maintainers.outputs.maintainers }}
          USERS_TO_EXCLUDE: ${{ steps.current-reviewers.outputs.users_to_exclude }}
          REPO: "${{ github.repository }}"
        run: |
          NEW_REVIEWERS=()

          # If there are no maintainers, exit early.
          if [[ -z "$MAINTAINERS" ]]; then
            echo "No maintainers to check."
            echo "new_reviewers=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          for MAINTAINER in $MAINTAINERS; do
            if echo "$USERS_TO_EXCLUDE" | grep -q -w "$MAINTAINER"; then
              echo "$MAINTAINER is already involved in the review, skipping."
              continue
            fi

            echo "Checking if $MAINTAINER is a collaborator..."
            if gh api "/repos/$REPO/collaborators/$MAINTAINER" --silent; then
              echo "User $MAINTAINER is a collaborator, adding to new reviewers list."
              NEW_REVIEWERS+=("$MAINTAINER")
            else
              echo "User $MAINTAINER is not a repository collaborator, skipping."
            fi
          done

          NEW_REVIEWERS_LIST=$(printf "%s " "${NEW_REVIEWERS[@]}")
          echo "new_reviewers=${NEW_REVIEWERS_LIST% }" >> "$GITHUB_OUTPUT"
          echo "New reviewers to add: ${NEW_REVIEWERS_LIST% }"

      # Add the new, filtered list of maintainers as reviewers to the PR.
      - name: Add new reviewers
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          NEW_REVIEWERS: ${{ steps.check-collaborators.outputs.new_reviewers }}
          PR_NUM: ${{ github.event.pull_request.number }}
        run: |
          if [[ -n "$NEW_REVIEWERS" ]]; then
            REVIEWERS_CSV=$(echo "$NEW_REVIEWERS" | tr ' ' ',')
            echo "Requesting reviews from: $REVIEWERS_CSV"
            gh pr edit "$PR_NUM" --add-reviewer "$REVIEWERS_CSV"
          else
            echo "No new reviewers to add."
          fi
